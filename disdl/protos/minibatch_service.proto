/*
Command to generate Python gRPC stubs:
python -m grpc_tools.protoc --proto_path=. protos/minibatch_service.proto --python_out=. --grpc_python_out=.




*/

syntax = "proto3";

import "google/protobuf/empty.proto";

service MiniBatchService {
  // Health check
  rpc Ping (PingRequest) returns (PingResponse);

  // Register a training job to a known dataset
  rpc RegisterJob (RegisterJobRequest) returns (RegisterJobResponse);

  // Fetch the next batch for a given job
  rpc GetNextBatchForJob (GetNextBatchForJobRequest) returns (GetNextBatchForJobResponse);

  // Notify server when a job ends
  rpc JobEnded (JobEndedRequest) returns (google.protobuf.Empty);

  // Report job metrics (e.g., timing, cache status)
  rpc JobUpdate (JobUpdateRequest) returns (google.protobuf.Empty);

  // List all available datasets on this server
  rpc ListDatasets (google.protobuf.Empty) returns (ListDatasetsResponse);
}

/* ----------------------------- Dataset Listing ----------------------------- */
message ListDatasetsResponse {
  repeated DatasetInfo datasets = 1;
}

message DatasetInfo {
  string name = 1;
  string location = 2;
  int32 num_samples = 3;
  int32 num_batches = 4;
  int32 num_partitions = 5;
}

/* ----------------------------- Health Check ----------------------------- */
message PingRequest {}

message PingResponse {
  string message = 1;
}

/* ----------------------------- Job Registration ----------------------------- */
message RegisterJobRequest {
  string dataset_name = 1; // e.g., "imagenet", "cifar10"
}

message RegisterJobResponse {
  string job_id = 1;
  string errorMessage = 2; // Optional error message

}

/* ----------------------------- Batch Fetching ----------------------------- */
message GetNextBatchForJobRequest {
  string job_id = 1;
}

message Sample {
  string data_path = 1;  // Path to image or data file
  string label = 2;      // Class label or metadata
}

message Batch {
  string batch_id = 1;
  string samples = 2;    // JSON-encoded sample list; can change to `repeated Sample` later
  bool is_cached = 3;
  // int64 timestamp = 4; // Optional: creation time
}

message GetNextBatchForJobResponse {
  Batch batch = 1;
  bool should_cache = 2; // Indicates if the batch should be cached
  string eviction_candidate = 3; // Optional: ID of a batch to evict
  // repeated Batch batches = 2;  // Optional future extension
}

/* ----------------------------- Job Lifecycle ----------------------------- */
message JobEndedRequest {
  string job_id = 1;
}

message JobUpdateRequest {
  string job_id = 1;
  bool batch_is_cached = 2;
  //double data_bottleneck_time = 3;        // e.g., time to fetch data from S3/Redis
  optional string evicted_batch_id = 3;
}

/*

message JobUpdateRequest {
  string job_id = 1;
  string previous_step_batch_id = 3;
  double previous_step_wait_for_data_time = 4; // seconds
  bool previous_step_is_cache_hit = 5;
  double previous_step_gpu_time = 6; // seconds
  bool prefetched_next_batch = 7;
}
*/
